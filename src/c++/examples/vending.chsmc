/*
**      CHSM Language System
**      src/c++/examples/vending.chsmc
**
**      Copyright (C) 1996-2013  Paul J. Lucas & Fabio Riccardi
**
**      This program is free software; you can redistribute it and/or modify
**      it under the terms of the GNU General Public License as published by
**      the Free Software Foundation; either version 2 of the License, or
**      (at your option) any later version.
**
**      This program is distributed in the hope that it will be useful,
**      but WITHOUT ANY WARRANTY; without even the implied warranty of
**      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
**      GNU General Public License for more details.
**
**      You should have received a copy of the GNU General Public License
**      along with this program; if not, write to the Free Software
**      Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
*/

/*
** Complete program to simulate a vending machine.
**
** Note: This is a "toy" program that exists for pedagogical reasons.
*/

#include <iostream>
using namespace std;

/**
 * A class derived from CHSM to contain additional information for a
 * vending_machine.
 */
class vm_data : public CHSM::machine {
public:
    struct item {
        char const  *name;              // name of yummy item
        int         price;              // cost in cents
    };

    vm_data( CHSM_MACHINE_ARGS, item const *item_array ) :
        CHSM::machine( CHSM_MACHINE_INIT ), m_item( item_array ) { }

    int num_items() const       { return m_num_items; }
protected:
    item const  *const m_item;          // array of items
    int         m_num_items;            // number of different kinds of items
    int         m_credit;               // running total of amount deposited
};

%%

chsm<vm_data> vending_machine( item const *item_array ) is {

    /********** EVENT SPECIFICATIONS **********/

    event coin( int value ) %{

        // precondition: must be valid denomination
        switch ( value ) {
            case 5: case 10: case 25:
                return true;
            case 1:
                cerr << "No pennies, please.\n";
                return false;
            default:
                cerr << "No foreign coins!\n";
                return false;
        }
    %};

    event select( int id ) %{

        // precondition: selection must be within range
        if ( id < 0 || id >= m_num_items ) {
            cerr << "Invalid selection\n";
            return false;
        }

        // precondition: must have deposited sufficient amount
        if ( m_credit >= m_item[ id ].price )
            return true;

        cerr << "Please deposit another "
             << m_item[ id ].price - m_credit << " cents.\n";
        return false;
    %};

    /********** STATE SPECIFICATIONS **********/

    /**
     * We sit here waiting for somebody to come along and insert the first
     * coin.
     */
    state idle {
        upon enter %{
            cout << "\nVending Machine:\n---------------\n";
            m_num_items = 0;
            for ( item const *p = &m_item[0]; p->name; ++p )
                cout    << char('A' + m_num_items++)
                    << ". " << p->name << " ("
                    << p->price << ")\n";
            m_credit = 0;
        %}

        coin -> collect;
    }

    /**
     * We enter here upon a coin insertion and reenter for for every coin
     * insertion thereafter until a selection is made.
     */
    state collect {
        upon enter %{
            m_credit += coin->value;
            cout << "Credit: " << m_credit << " cents\n";
        %}

        coin -> collect;

        select -> idle %{
            cout    << "Enjoy your " << m_item[ select->id ].name
                << ".\n";
            int change = m_credit - m_item[ select->id ].price;
            if ( change > 0 )
                cout << "Change: " << change << " cents.\n";
        %};
    }
}

%%

#include <cctype>                       /* for toupper() */
#include <cstdlib>                      /* for atoi() */

vending_machine::item yummy_treats[] = {
    { "Cheeze Puffs",   65 },
    { "Chocolate Bar",  60 },
    { "Corn Chips",     80 },
    { "Popcorn",        90 },
    { "Potato Chips",   80 },
    { "Pretzels",       60 },
    0
};

int main() {
    vending_machine vm( yummy_treats );

#ifdef DEBUG
    vm.debug( CHSM::machine::D_all );
#endif

    vm.enter();

    while ( !cin.eof() ) {
        //
        // Simple user-interface just to get events into the machine.
        //
        cout << "\nEnter coins (5,10,25) or selection (A-"
             << char( 'A' + vm.num_items() - 1 ) << "): ";

        char buf[10];
        cin.getline( buf, sizeof buf );

        if ( isdigit( *buf ) )
            vm.coin( ::atoi( buf ) );
        else if ( isalpha( *buf ) )
            vm.select( toupper( *buf ) - 'A' );
        else
            cerr << "Invalid input\n";
    }
    return 0;
}
// vim:set et sw=4 ts=4 syntax=cpp:
