/*
**      CHSM Language System
**      src/c++/examples/grid.chsmc
**
**      Copyright (C) 2006-2013  Paul J. Lucas & Fabio Riccardi
**
**      This program is free software; you can redistribute it and/or modify
**      it under the terms of the GNU General Public License as published by
**      the Free Software Foundation; either version 2 of the License, or
**      (at your option) any later version.
**
**      This program is distributed in the hope that it will be useful,
**      but WITHOUT ANY WARRANTY; without even the implied warranty of
**      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
**      GNU General Public License for more details.
**
**      You should have received a copy of the GNU General Public License
**      along with this program; if not, write to the Free Software
**      Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
*/

#include <cctype>
#include <iostream>
#include <stack>

using namespace std;

/**
 * A %stack_machine is-a CHSM::machine that additionally maintains a stack of
 * states.
 */
class stack_machine : public CHSM::machine {
public:
    stack_machine( CHSM_MACHINE_ARGS ) : CHSM::machine( CHSM_MACHINE_INIT ) { }

    void push_state( CHSM::state *s ) {
        state_stack_.push( s );
    }

    CHSM::state* pop_state() {
        if ( state_stack_.empty() )
            return 0;
        CHSM::state *const s = state_stack_.top();
        state_stack_.pop();
        return s;
    }
private:
    typedef std::stack<CHSM::state*> state_stack;
    state_stack state_stack_;
};

/**
 * A %push_on_exit is-a CHSM::state that pushes itself onto the stack of a
 * stack_machine upon exit.
 */
class push_on_exit : public CHSM::state {
public:
    push_on_exit( CHSM_STATE_ARGS ) : CHSM::state( CHSM_STATE_INIT ) { }
    bool exit( CHSM::event const&, CHSM::state* );
};

%%

/**
 * A %grid is a 3x3 grid of compass locations.  One can move around the grid by
 * broadcasting the direction to go.  One can also undo one's move and go back.
 */
chsm<stack_machine> grid is {

    cluster location(nw,n,ne,w,c,e,sw,s,se) {
        //
        // By using an outer cluster, we can specify what to do upon an undo
        // event once.
        //
        undo -> [ pop_state() ];
    } is {
        state<push_on_exit> c {
            north -> n;
            south -> s;
            west -> w;
            east -> e;
        }
        state<push_on_exit> nw {
            east -> n;
            south -> w;
        }
        state<push_on_exit> n {
            west -> nw;
            east -> ne;
            south -> c;
        }
        state<push_on_exit> ne {
            west -> n;
            south -> e;
        }
        state<push_on_exit> w {
            north -> nw;
            east -> c;
            south -> sw;
        }
        state<push_on_exit> e {
            west -> c;
            north -> ne;
            south -> se;
        }
        state<push_on_exit> sw {
            north -> w;
            east -> s;
        }
        state<push_on_exit> s {
            west -> sw;
            north -> c;
            east -> se;
        }
        state<push_on_exit> se {
            west -> s;
            north -> e;
        }
    }
}

%%

/**
 * Override exit() to keep track of what states we've moved from so we can
 * later go back if desired.
 */
bool push_on_exit::exit( CHSM::event const &trigger, CHSM::state *to ) {
    //
    // Call base-class exit() function as required and proceed only if it
    // returns true.
    //
    if ( !CHSM::state::exit( trigger, to ) )
        return false;
    //
    // To implement multiple levels of undo, we push the state only if the
    // event isn't undo.  If undo events were pushed also, then only one level
    // of undo would be implemented because each undo would undo the previous
    // undo and the state would flip-flop.
    //
    if ( !trigger.is_type<grid::undo_event>() )
        dynamic_cast<stack_machine&>( machine_ ).push_state( this );
    return true;
}

int main() {
    grid g;
    g.enter();

    while ( !cin.eof() ) {
        g.dump_state();
        cout << "Enter: (N)orth (S)outh (E)ast (W)est (U)ndo: " << flush;
        char ch;
        cin >> ch;
        switch ( toupper( ch ) ) {
            case 'N': g.north(); break;
            case 'S': g.south(); break;
            case 'E': g.east() ; break;
            case 'W': g.west() ; break;
            case 'U': g.undo() ; break;
            default : cerr << "Invalid input\n";
        }
    }
    return 0;
}
// vim:set et sw=4 ts=4 syntax=cpp:
