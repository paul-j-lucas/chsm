/*
**      CHSM Language System
**      src/c++/tests/enter_once.chsmc
**
**      Copyright (C) 1996-2013  Paul J. Lucas & Fabio Riccardi
**
**      This program is free software; you can redistribute it and/or modify
**      it under the terms of the GNU General Public License as published by
**      the Free Software Foundation; either version 2 of the License, or
**      (at your option) any later version.
** 
**      This program is distributed in the hope that it will be useful,
**      but WITHOUT ANY WARRANTY; without even the implied warranty of
**      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
**      GNU General Public License for more details.
** 
**      You should have received a copy of the GNU General Public License
**      along with this program; if not, write to the Free Software
**      Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
*/

#include <iostream>
using namespace std;

int exit_code = -1;

class probe : public CHSM::state {
public:
    probe( CHSM_STATE_ARGS ) : CHSM::state( CHSM_STATE_INIT ) { }
    bool enter( CHSM::event const&, CHSM::state* );
};

%%

// Tests that code in enter() is executed exactly once.

chsm my_machine is {
    state a {
        alpha -> c.x;
    }
    cluster c(x) is {
        state<probe> x;
    }
}

%%

bool probe::enter( CHSM::event const &e, CHSM::state *s ) {
    //
    // If we are being entered directly, bypassing our parent, the call to our
    // inherited function is supposed to return false because we will be
    // entered later by our parent in due course.
    //
    if ( !CHSM::state::enter( e, s ) )
        return false;
    //
    // This code is supposed to execute exactly once; if not, exit_code will be
    // non-zero.
    //
    ++exit_code;

    return true;
}

int main() {
    my_machine m;
    m.enter();

#ifdef DEBUG
    m.debug( CHSM::machine::D_all );
#endif

    m.alpha();

#ifdef DEBUG
    m.dump_state();
#endif

    if ( !( m.active() &&
        !m.a.active() && m.c.active() && m.c.x.active()
    ) )
        exit_code = 1;

    cout << (exit_code ? "INCORRECT" : "correct") << endl;
    return exit_code;
}
// vim:set et sw=4 ts=4 syntax=cpp:
