/*
**      CHSM Language System
**      examples/c++/vending.chsmc
**
**      Copyright (C) 1996-2018  Paul J. Lucas & Fabio Riccardi
**
**      This program is free software; you can redistribute it and/or modify
**      it under the terms of the GNU General Public License as published by
**      the Free Software Foundation; either version 3 of the License, or
**      (at your option) any later version.
**
**      This program is distributed in the hope that it will be useful,
**      but WITHOUT ANY WARRANTY; without even the implied warranty of
**      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
**      GNU General Public License for more details.
**
**      You should have received a copy of the GNU General Public License
**      along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

/**
 * @file
 * Complete program to simulate a vending machine.
 *
 * @note This is a "toy" program that exists for pedagogical reasons.
 */

// CHSM
#include <chsm.h>

// standard
#include <cctype>                       /* for toupper() */
#include <cstdlib>                      /* for atoi() */
#include <iostream>

using namespace std;

///////////////////////////////////////////////////////////////////////////////

/**
 * A class derived from CHSM to contain additional information for a
 * vending_machine.
 */
class vm_data : public CHSM::machine {
public:
  struct item {
    char const *name;                   // name of yummy item
    unsigned    price;                  // cost in cents
  };

  vm_data( CHSM_MACHINE_ARGS, item const *item_array ) :
    CHSM::machine( CHSM_MACHINE_INIT ), item_( item_array )
  {
  }

  unsigned num_items() const {
    return num_items_;
  }

protected:
  item const *const item_;              // array of items
  unsigned          num_items_;         // number of different kinds of items
  unsigned          credit_;            // running total of amount deposited
};

%%
///////////////////////////////////////////////////////////////////////////////

chsm<vm_data> vending_machine( item const *item_array ) is {

  /********** EVENT SPECIFICATIONS **********/

  event coin( unsigned value ) %{

    // precondition: must be valid denomination
    switch ( value ) {
      case 5: case 10: case 25:
        return true;
      case 1:
        cerr << "No pennies, please.\n";
        return false;
      default:
        cerr << "No foreign coins!\n";
        return false;
    } // switch
  %};

  event select( unsigned id ) %{

    // precondition: selection must be within range
    if ( id >= num_items_ ) {
      cerr << "Invalid selection\n";
      return false;
    }

    // precondition: must have deposited sufficient amount
    if ( credit_ < item_[ id ].price ) {
      cerr << "Please deposit another "
           << item_[ id ].price - credit_ << " cents.\n";
      return false;
    }

    return true;
  %};

  /********** STATE SPECIFICATIONS **********/

  /**
   * We sit here waiting for somebody to come along and insert the first coin.
   */
  state idle {
    upon enter %{
      cout << "\nVending Machine:\n---------------\n";
      num_items_ = 0;
      for ( item const *p = &item_[0]; p->name; ++p ) {
        cout << char('A' + num_items_++)
             << ". " << p->name << " (" << p->price << ")\n";
      } // for
      credit_ = 0;
    %}

    coin -> collect;
  }

  /**
   * We enter here upon a coin insertion and reenter for for every coin
   * insertion thereafter until a selection is made.
   */
  state collect {
    upon enter %{
      credit_ += coin->value;
      cout << "Credit: " << credit_ << " cents\n";
    %}

    coin -> collect;

    select -> idle %{
      cout << "Enjoy your " << item_[ select->id ].name << ".\n";
      if ( unsigned const change = credit_ - item_[ select->id ].price )
        cout << "Change: " << change << " cents.\n";
    %};
  }
}

///////////////////////////////////////////////////////////////////////////////
%%

vending_machine::item const yummy_treats[] = {
  { "Cheeze Puffs",   65 },
  { "Chocolate Bar",  60 },
  { "Corn Chips",     80 },
  { "Popcorn",        90 },
  { "Potato Chips",   80 },
  { "Pretzels",       60 },
  { nullptr,           0 }
};

int main() {
  vending_machine vm( yummy_treats );

#ifdef DEBUG
  vm.debug( CHSM::machine::DEBUG_ALL );
#endif

  vm.enter();

  while ( !cin.eof() ) {
    //
    // Simple user-interface just to get events into the machine.
    //
    cout << "\nEnter coins (5,10,25) or selection (A-"
         << char( 'A' + vm.num_items() - 1 ) << "): ";

    char buf[10];
    cin.getline( buf, sizeof buf );

    if ( isdigit( *buf ) )
      vm.coin( ::atoi( buf ) );
    else if ( isalpha( *buf ) )
      vm.select( toupper( *buf ) - 'A' );
    else
      cerr << "Invalid input\n";
  } // while

  return 0;
}

///////////////////////////////////////////////////////////////////////////////
// vim:set et sw=2 ts=2 syntax=cpp:
