/*
**      CHSM Language System
**      src/examples/java/vending.chsmj
**
**      Copyright (C) 2004-2018  Paul J. Lucas & Fabio Riccardi
**
**      This program is free software; you can redistribute it and/or modify
**      it under the terms of the GNU General Public License as published by
**      the Free Software Foundation; either version 3 of the License, or
**      (at your option) any later version.
**
**      This program is distributed in the hope that it will be useful,
**      but WITHOUT ANY WARRANTY; without even the implied warranty of
**      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
**      GNU General Public License for more details.
**
**      You should have received a copy of the GNU General Public License
**      along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

/**
 * @file
 * Complete program to simulate a vending machine.
 *
 * @note This is a "toy" program that exists for pedagogical reasons.
 */

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

///////////////////////////////////////////////////////////////////////////////

/**
 * A class derived from CHSM.Machine to contain additional information for
 * VendingMachine.
 */
class vmData extends CHSM.Machine {
  public static final class Item {
    final String  name;                 // name of yummy item
    final int     price;                // cost in cents

    public Item( String s, int i ) {
      name  = s;
      price = i;
    }
  }

  public vmData( Item items[] ) {
    item_ = items;
  }

  public int numItems() {
    return item_.length;
  }

  protected Item item_[];               // array of items
  protected int  credit_;               // running total of amount deposited
}

%%
///////////////////////////////////////////////////////////////////////////////

chsm<vmData> VendingMachine( Item items[] ) is {

  /********** EVENT SPECIFICATIONS **********/

  event coin( int value ) %{

    // precondition: must be valid denomination
    switch ( value ) {
      case 5: case 10: case 25:
        return true;
      case 1:
        System.err.println( "No pennies, please." );
        return false;
      default:
        System.err.println( "No foreign coins!" );
        return false;
    } // switch
  %};

  event select( int id ) %{

    // precondition: selection must be within range
    if ( id < 0 || id >= numItems() ) {
      System.err.println( "Invalid selection" );
      return false;
    }

    // precondition: must have deposited sufficient amount
    if ( credit_ >= item_[ id ].price )
      return true;

    System.out.println(
      "Please deposit another " +
      (item_[ id ].price - credit_) + " cents."
    );
    return false;
  %};

  /********** STATE SPECIFICATIONS **********/

  state idle {
    /*
    ** idle state: We sit here waiting for somebody to come along and insert
    **    the first coin.
    */
    upon enter %{
      System.out.println( "\nVending Machine:\n---------------" );
      for ( int i = 0; i < numItems(); ++i ) {
        System.out.println(
          (char)('A' + i) + ". " + item_[i].name +
          " (" + item_[i].price + ")"
        );
      } // for
      credit_ = 0;
    %}

    coin -> collect;
  }

  state collect {
    /*
    ** collect state: We enter here upon a coin insertion and reenter for
    **    every coin insertion thereafter until a selection is made.
    */
    upon enter %{
      credit_ += $param( coin, value );
      System.out.println( "Credit: " + credit_ + " cents" );
    %}

    coin -> collect;

    select -> idle %{
      System.out.println(
        "Enjoy your " + item_[ $param( select, id ) ].name + '.'
      );
      int change = credit_ - item_[ $param( select, id ) ].price;
      if ( change > 0 )
        System.out.println( "Change: " + change + " cents." );
    %};
  }
}

///////////////////////////////////////////////////////////////////////////////
%%

public class vending {

  public static void main( String args[] ) {
    final VendingMachine vm = new VendingMachine( yummyTreats );
    //vm.debug( CHSM.Machine.DEBUG_ALL );
    vm.enter();

    final BufferedReader in =
      new BufferedReader( new InputStreamReader( System.in ) );

    while ( true ) {
      //
      // Simple user-interface just to get events into the machine.
      //
      System.out.print(
        "\nEnter coins (5,10,25) or selection (A-" +
        (char)( 'A' + vm.numItems() - 1 ) + "): "
      );
      System.out.flush();

      String buf;
      try {
        buf = in.readLine();
      }
      catch ( IOException e ) {
        return;
      }
      if ( buf == null )
          return;
      final char ch = buf.charAt(0);

      if ( Character.isDigit( ch ) )
        vm.coin( Integer.parseInt( buf ) );
      else if ( Character.isLetter( ch ) )
        vm.select( Character.toUpperCase( ch ) - 'A' );
      else
          System.err.println( "Invalid input" );
    } // while
  }

  private static final VendingMachine.Item yummyTreats[] = {
    new vmData.Item( "Cheeze Puffs",   65 ),
    new vmData.Item( "Chocolate Bar",  60 ),
    new vmData.Item( "Corn Chips",     80 ),
    new vmData.Item( "Popcorn",        90 ),
    new vmData.Item( "Potato Chips",   80 ),
    new vmData.Item( "Pretzels",       60 )
  };
}

///////////////////////////////////////////////////////////////////////////////
// vim:set et sw=2 ts=2 syntax=java:
