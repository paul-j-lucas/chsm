/*
**      CHSM Language System
**      src/examples/java/grid.chsmj
**
**      Copyright (C) 2006-2018  Paul J. Lucas & Fabio Riccardi
**
**      This program is free software; you can redistribute it and/or modify
**      it under the terms of the GNU General Public License as published by
**      the Free Software Foundation; either version 3 of the License, or
**      (at your option) any later version.
**
**      This program is distributed in the hope that it will be useful,
**      but WITHOUT ANY WARRANTY; without even the implied warranty of
**      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
**      GNU General Public License for more details.
**
**      You should have received a copy of the GNU General Public License
**      along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

/**
 * @file
 * Complete program to implement a state machine with history and undo-ability.
 *
 * @note This is a "toy" program that exists for pedagogical reasons.
 */

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Stack;

///////////////////////////////////////////////////////////////////////////////

/**
 * A %StackMachine is-a CHSM.Machine that additionally maintains a stack of
 * states.
 */
class StackMachine extends CHSM.Machine {

  public void push_state( CHSM.State s ) {
    state_stack_.push( s );
  }

  public CHSM.State pop_state() {
    if ( state_stack_.empty() )
      return null;
    return state_stack_.pop();
  }

  private final Stack<CHSM.State> state_stack_ = new Stack<CHSM.State>();
}

/**
 * A %PushOnExit is-a CHSM.State that pushes itself onto the stack of a
 * StackMachine upon exit.
 */
class PushOnExit extends CHSM.State {
  public PushOnExit( CHSM_STATE_ARGS ) {
    super( CHSM_STATE_INIT );
  }

  /**
   * Override exit() to keep track of what states we've moved from so we can
   * later go back if desired.
   */
  public boolean exit( CHSM.Event trigger, CHSM.State to ) {
    //
    // Call base-class exit() function as required and proceed only if it
    // returns true.
    //
    if ( !super.exit( trigger, to ) )
      return false;
    //
    // To implement multiple levels of undo, we push the state only if the
    // event isn't undo.  If undo events were pushed also, then only one level
    // of undo would be implemented because each undo would undo the previous
    // undo and the state would flip-flop.
    //
    if ( !( trigger instanceof Grid_3x3.undoEvent ) )
      ((StackMachine)machine()).push_state( this );
    return true;
  }
}

%%
///////////////////////////////////////////////////////////////////////////////

/**
 * A %Grid_3x3 is a 3x3 grid of compass locations.  One can move around the
 * grid by broadcasting the direction to go.  One can also undo one's move and
 * go back.
 */
chsm<StackMachine> Grid_3x3 is {

  cluster location(nw,n,ne,w,c,e,sw,s,se) {
    //
    // By using an outer cluster, we can specify what to do upon an undo event
    // once.
    //
    undo -> [ pop_state() ];
  } is {
    state<PushOnExit> c {
      north -> n;
      south -> s;
      west -> w;
      east -> e;
    }
    state<PushOnExit> nw {
      east -> n;
      south -> w;
    }
    state<PushOnExit> n {
      west -> nw;
      east -> ne;
      south -> c;
    }
    state<PushOnExit> ne {
      west -> n;
      south -> e;
    }
    state<PushOnExit> w {
      north -> nw;
      east -> c;
      south -> sw;
    }
    state<PushOnExit> e {
      west -> c;
      north -> ne;
      south -> se;
    }
    state<PushOnExit> sw {
      north -> w;
      east -> s;
    }
    state<PushOnExit> s {
      west -> sw;
      north -> c;
      east -> se;
    }
    state<PushOnExit> se {
      west -> s;
      north -> e;
    }
  }
}

///////////////////////////////////////////////////////////////////////////////
%%

public class grid {

  public static void main( String args[] ) {
    final Grid_3x3 g = new Grid_3x3();
    g.enter();

    final BufferedReader in =
      new BufferedReader( new InputStreamReader( System.in ) );

    while ( true ) {
      g.dumpState();
      System.out.print( "Enter: (N)orth (S)outh (E)ast (W)est (U)ndo: " );
      System.out.flush();

      String buf;
      try {
        buf = in.readLine();
      }
      catch ( IOException e ) {
        return;
      }
      if ( buf == null )
        return;
      final char ch = buf.charAt(0);

      switch ( Character.toUpperCase( ch ) ) {
        case 'N': g.north(); break;
        case 'S': g.south(); break;
        case 'E': g.east() ; break;
        case 'W': g.west() ; break;
        case 'U': g.undo() ; break;
        default : System.err.println( "Invalid input" );
      } // switch
    } // while
  }
}

///////////////////////////////////////////////////////////////////////////////
// vim:set et sw=2 ts=2 syntax=java:
