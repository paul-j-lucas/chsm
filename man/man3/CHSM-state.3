.\"
.\"     CHSM Language System
.\"     CHSM::state.3 -- state class manual page
.\"
.\"     Copyright (C) 1996-2013  Paul J. Lucas & Fabio Riccardi
.\"
.\"     This program is free software; you can redistribute it and/or modify
.\"     it under the terms of the GNU General Public License as published by
.\"     the Free Software Foundation; either version 2 of the License, or
.\"     (at your option) any later version.
.\" 
.\"     This program is distributed in the hope that it will be useful,
.\"     but WITHOUT ANY WARRANTY; without even the implied warranty of
.\"     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\"     GNU General Public License for more details.
.\" 
.\"     You should have received a copy of the GNU General Public License
.\"     along with this program; if not, write to the Free Software
.\"     Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
.\"
.TH \f3CHSM::state\f1 3 "January 21, 2010" "CHSM" "CHSM Language System"
.SH NAME
state \- CHSM state class
.SH SYNOPSIS
.ft CW
.nf
#define CHSM_STATE_ARGS /* ... */
#define CHSM_STATE_INIT /* ... */

namespace Concurrent_Hierarchical_State_Machine {

    class state {
    public:
        state( CHSM_STATE_ARGS );

        bool            active() const;
        virtual void    deep_clear();
        char const*     name() const;
        parent*         parent_of() const;
    protected:
        virtual bool    enter( event const &trigger, state* = 0 );
        virtual bool    exit ( event const &trigger, state* = 0 );
    };

}
.fi
.ft 1
.SH DESCRIPTION
A \f(CWstate\f1 is the class used to represent an atomic state in a CHSM.
It is also the base class for
.BR CHSM::parent (3).
.SS "Member Functions"
.IP "\f(CWbool active() const\f1"
Returns \f(CWtrue\f1 only if the state is currently active.
.IP "\f(CWvirtual void deep_clear()\f1"
Recursively clears the deep history of all child clusters.
.IP "\f(CWvirtual bool enter( event const &trigger, state* = 0 )\f1"
.IP "\f(CWvirtual bool exit ( event const &trigger, state* = 0 )\f1"
Returns \f(CWtrue\f1 only if the state was actually entered or exited,
respectively.
The \f(CWtrigger\f1 is a reference to the event that is causing the state
to be entered or exited.
The remaining argument is for use of the implementation only
and subject to change.
These functions can be overridden in a derived class to alter
the behavior of states.
.IP "\f(CWchar const* name() const\f1"
Returns the fully-qualified name of the state.
.IP "\f(CWparent* parent_of() const\f1"
Returns a pointer to the parent state, if any; null otherwise.
.SS "Derived Classes"
The \f(CWstate\f1 class can be derived from
either to add additional data members and members functions to a state
or to alter its behavior upon being entered or exited.
The macros \f(CWCHSM_STATE_ARGS\f1 and \f(CWCHSM_STATE_INIT\f1
are used in the derived class's constructor
and shield the user from the ugly arguments lists
used in the CHSM implementation.
.SH EXAMPLE
.ft CW
.nf
#include <chsm.h>

class place : public CHSM::state {
    //
    // This class is meant to simulate the behavior of a "place"
    // in Petri Net terminology.  Places have zero or more tokens
    // at them.
    //
public:
    place( CHSM_STATE_ARGS ) :
        CHSM::state( CHSM_STATE_INIT ), tokens_( -1 ) { }
    //
    // Conversion to int: Allows state name to be used in
    // arithmetic expressions.
    //
    operator int() const { return tokens_; }

    //
    // Operator to allow the number of tokens to be decrememented.
    //
    int operator-=( int used ) { return tokens_ -= used + 1; }

protected:
    bool enter( event const &trigger, state *s = 0 ) {
        //
        // Call base-class enter() function as required and
        // proceed only if it returns true.
        //
        if ( !CHSM::state::enter( trigger, s ) )
            return false;
        //
        // Increment the number of tokens for every entrance.
        //
        ++tokens_;

        return true;
    }
private:
    int tokens_;
};

int water_molecules = 0;

%%
chsm make_water is {
    set H2O( H2, O2 ) {
        //
        // The conditions might seem to be off by one for
        // hydrogen on the transition of hydrogen and similarly
        // for oxygen.  You have to remember though that the
        // transition being triggered itself is either a hydrogen
        // or oxygen so we have to take that into account.
        //
        hydrogen[ ${H2} >= 1 && ${O2} >= 1 ] -> H2O %{
            ${H2} -= 1, ${O2} -= 1;
            water_molecules += 2;
        %}
        oxygen[ ${H2} >= 2 ] -> H2O %{
            ${H2} -= 2;
            water_molecules += 2;
        %}
    } is {
        state<place> H2 { hydrogen -> H2; }
        state<place> O2 { oxygen -> O2; }
    }
}
.fi
.ft 1
.SH SEE ALSO
.BR CHSM::cluster (3),
.BR CHSM::parent (3),
.BR CHSM::set (3),
.BR chsm-c++ (4)
.PP
Tadao Murata.
``Petri Nets: Properties, Analysis and Applications.''
.I "Proceedings of the IEEE,"
99(4), April 1989.
pp. 541-580.
.SH AUTHORS
Paul J. Lucas
.RI < paul@lucasmail.org >
.br
Fabio Riccardi
.RI < fabio.riccardi@mac.com >
.\" vim:set et sw=4 ts=4:
