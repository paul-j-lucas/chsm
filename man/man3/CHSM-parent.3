.\"
.\"	    CHSM Language System
.\"	    CHSM::parent.3 -- parent class manual page
.\"
.\"	    Copyright (C) 1996-2013  Paul J. Lucas & Fabio Riccardi
.\"
.\"	    This program is free software; you can redistribute it and/or modify
.\"	    it under the terms of the GNU General Public License as published by
.\"	    the Free Software Foundation; either version 2 of the License, or
.\"	    (at your option) any later version.
.\" 
.\"	    This program is distributed in the hope that it will be useful,
.\"	    but WITHOUT ANY WARRANTY; without even the implied warranty of
.\"	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\"	    GNU General Public License for more details.
.\" 
.\"	    You should have received a copy of the GNU General Public License
.\"	    along with this program; if not, write to the Free Software
.\"	    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
.\"
.TH \f3CHSM::parent\f1 3 "January 21, 2010" "CHSM" "CHSM Language System"
.SH NAME
parent \- CHSM parent class
.SH SYNOPSIS
.ft CW
.nf
namespace Concurrent_Hierarchical_State_Machine {

    class parent : public state {
    public:
        typedef state value_type;
        typedef value_type* pointer;
        typedef value_type const* const_pointer;
        typedef value_type& reference;
        typedef value_type const& const_reference;

        bool			empty() const;
        reference		front();
        const_reference	front() const;

        class iterator {
        public:
            iterator();

            reference operator* () const;
            pointer   operator\->() const;

            iterator& operator++();
            iterator  operator++(int);

            friend bool operator==( iterator const&, iterator const& );
            friend bool operator!=( iterator const&, iterator const& );
        };
        iterator begin();
        iterator end();

        class const_iterator {
        public:
            const_iterator();

            const_reference operator* () const;
            const_pointer   operator\->() const;

            const_iterator& operator++();
            const_iterator  operator++(int);

            friend bool
            operator==( const_iterator const&, const_iterator const& );
            friend bool
            operator!=( const_iterator const&, const_iterator const& );
        };
        const_iterator begin() const;
        const_iterator end() const;

        // inherited
        bool active() const;
        virtual void deep_clear();
        virtual bool enter( event const &trigger, state* = 0 );
        virtual bool exit ( event const &trigger, state* = 0 );
        char const* name() const;
        parent* parent_of() const;
    };

}
.fi
.ft 1
.SH DESCRIPTION
A \f(CWparent\f1 
.I is-a
.BR CHSM::state (3)
that serves as the base class for
.BR CHSM::cluster (3)
and
.BR CHSM::set (3).
It is a container class for child states.
.SS "Member Functions"
.IP "\f(CWbool empty() const\f1"
Returns \f(CWtrue\f1 only if it contains no child states.
.IP "\f(CWreference front()\f1"
.IP "\f(CWconst_reference front() const\f1"
Returns a reference to the first child state specified in the CHSM description.
For clusters, this corresponds to the default child state.
.SS "Iterators"
The iterator classes iterate over the child states
in the order specified in the CHSM description.
They are in the STL style.
.SH SEE ALSO
.BR CHSM::cluster (3),
.BR CHSM::set (3),
.BR CHSM::state (3),
.BR chsm-c++ (4),
.BR iterator (STL)
.SH AUTHORS
Paul J. Lucas
.RI < paul@lucasmail.org >
.br
Fabio Riccardi
.RI < fabio.riccardi@mac.com >
.\" vim:set et sw=4 ts=4:
