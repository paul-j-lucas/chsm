.\"
.\"     CHSM Language System
.\"     chsmc.1 -- CHSM compiler manual page
.\"
.\"     Copyright (C) 1996-2018  Paul J. Lucas & Fabio Riccardi
.\"
.\"     This program is free software; you can redistribute it and/or modify
.\"     it under the terms of the GNU General Public License as published by
.\"     the Free Software Foundation; either version 3 of the License, or
.\"     (at your option) any later version.
.\"     
.\"     This program is distributed in the hope that it will be useful,
.\"     but WITHOUT ANY WARRANTY; without even the implied warranty of
.\"     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\"     GNU General Public License for more details.
.\"     
.\"     You should have received a copy of the GNU General Public License
.\"     along with this program.  If not, see <http://www.gnu.org/licenses/>.
.\"
.TH \f3chsmc\fP 1 "January 31, 2018" "CHSM" "CHSM Language System"
.SH NAME
chsmc \- CHSM compiler
.SH SYNOPSIS
.B chsmc
[
.I options
]
.I source-file
.SH DESCRIPTION
.B chsmc
is the Concurrent Hierarchical Finite State Machine (CHSM) compiler
that compiles a CHSM specification
into a target language,
either C++ or Java.
The specification may be annotated with target language code fragments
in the tradition of yacc grammars with C code fragments.
.SH LANGUAGE
.SS C++
For a CHSM-C++ source file,
.IR source \f(CW.chsmc\fP,
.B chsmc
by default creates two files,
.IR source \f(CW.h\fP
and
.IR source \f(CW.cpp\fP,
containing the generated C++ code in the current directory
to be subsequently compiled with a C++ compiler.
.SS Java
For a CHSM-Java source file,
.IR source \f(CW.chsmj\fP,
.B chsmc
by default creates one file,
.IR source \f(CW.java\fP,
containing the generated Java code in the current directory
to be subsequently compiled with a Java compiler.
.SH OPTIONS
An option argument
.I f
means
.I file
and
.I s
means
.IR string .
.TP 4
.BI \-c " f"
(C++ only.)
Same as
\f(CW\-\-definition\fP
or
\f(CW-D\fP,
but also implies \f(CW\-\-language=c++\fP.
.TP
.BI \-\-declaration \f1=\fPf "\f1 | \fP" "" \-d " f"
Sets the declaration file name to
.IR f .
.TP
.BI \-\-definition \f1=\fPf "\f1 | \fP" "" \-D " f"
(C++ only.)
Sets the definition file name to
.IR f .
.TP
.BI \-h " f"
(C++ only.)
Same as
\f(CW\-\-declaration\fP
or
\f(CW-d\fP,
but also implies \f(CW\-\-language=c++\fP.
.TP
.BI \-\-java \f1=\fPf "\f1 | \fP" "" \-j " f"
(Java only.)
Same as
\f(CW\-\-declaration\fP
or
\f(CW-d\fP,
but also implies \f(CW\-\-language=java\fP.
.TP
.BI \-\-language \f1=\fPs "\f1 | \fP" "" \-x " s"
Explicitly sets the language to generate to
.I s
(which is case-insenitive),
either
\f(CWC++\fP
or
\f(CWJava\fP.
.TP
.BR \-\-no-line " | " \-P
(C++ only.)
Suppress \f(CW#line\fP directives in the generated C++ code.
.TP
.BR \-\-stdout " | " \-E
Generates all code to standard output
instead of producing declaration and definition files.
.TP
.BR \-\-version " | " \-v
Prints the version number of
.BR chsmc (1)
and exits.
.TP
.BR \-\-yydebug " | " \-y
Turns on
.BR bison (1)
debugging output
(if compiled in).
The additional output is of grammar productions
as they are being reduced by the parser.
(This is a debugging aid for developers of
.B chsmc
itself.)
.SH FILES
.PD 0
.TP 14
\f(CWchsm.jar\fP
Java run-time library.
.TP
\f(CWlibchsm.a\fP
C++ run-time library.
.TP
.IR source \f(CW.chsmc\fP
CHSM-C++ source file
.TP
.IR source \f(CW.chsmj\fP
CHSM-Java source file
.PD
.SH ENVIRONMENT
.TP 6
.B TMPDIR
If set,
the directory for temporary files.
If unset,
defaults to \f(CW/tmp\fP.
.SH SEE ALSO
.BR bison (1),
.BR cpp (1),
.BR gcc (1),
.BR yacc (1),
.BR chsm-c++ (4),
.BR chsm-java (4)
.SH DIAGNOSTICS
The diagnostics produced by
.B chsmc
itself are intended to be self-explanatory.
.SH AUTHORS
Paul J. Lucas
.RI < paul@lucasmail.org >
.br
Fabio Riccardi
.RI < fricc@gmail.com >
.\" vim:set et sw=4 ts=4:
